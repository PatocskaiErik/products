{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent2, Classes, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Button } from \"../button/buttons\";\nimport { Dialog } from \"./dialog\";\nimport { DialogStep } from \"./dialogStep\";\nvar PADDING_BOTTOM = 0;\nvar MIN_WIDTH = 800;\n\nvar MultistepDialog =\n/** @class */\nfunction (_super) {\n  __extends(MultistepDialog, _super);\n\n  function MultistepDialog() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = _this.getInitialIndexFromProps(_this.props);\n\n    _this.renderDialogStep = function (step, index) {\n      var _a;\n\n      var stepNumber = index + 1;\n      var hasBeenViewed = _this.state.lastViewedIndex >= index;\n      var currentlySelected = _this.state.selectedIndex === index;\n      return React.createElement(\"div\", {\n        className: classNames(Classes.DIALOG_STEP_CONTAINER, (_a = {}, _a[Classes.ACTIVE] = currentlySelected, _a[Classes.DIALOG_STEP_VIEWED] = hasBeenViewed, _a)),\n        key: index\n      }, React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP,\n        onClick: _this.handleClickDialogStep(index)\n      }, React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP_ICON\n      }, stepNumber), React.createElement(\"div\", {\n        className: Classes.DIALOG_STEP_TITLE\n      }, step.props.title)));\n    };\n\n    _this.handleClickDialogStep = function (index) {\n      if (index > _this.state.lastViewedIndex) {\n        return;\n      }\n\n      return _this.getDialogStepChangeHandler(index);\n    };\n\n    return _this;\n  }\n\n  MultistepDialog.prototype.render = function () {\n    var _a = this.props,\n        showCloseButtonInFooter = _a.showCloseButtonInFooter,\n        isCloseButtonShown = _a.isCloseButtonShown,\n        otherProps = __rest(_a, [\"showCloseButtonInFooter\", \"isCloseButtonShown\"]); // Only one close button should be displayed. If the footer close button\n    // is shown, we need to ensure the dialog close button is not displayed.\n\n\n    var isCloseButtonVisible = !showCloseButtonInFooter && isCloseButtonShown;\n    return React.createElement(Dialog, __assign({\n      isCloseButtonShown: isCloseButtonVisible\n    }, otherProps, {\n      style: this.getDialogStyle()\n    }), React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_PANELS\n    }, this.renderLeftPanel(), this.maybeRenderRightPanel()));\n  };\n\n  MultistepDialog.prototype.componentDidUpdate = function (prevProps) {\n    if ((prevProps.resetOnClose || prevProps.initialStepIndex !== this.props.initialStepIndex) && !prevProps.isOpen && this.props.isOpen) {\n      this.setState(this.getInitialIndexFromProps(this.props));\n    }\n  };\n\n  MultistepDialog.prototype.getDialogStyle = function () {\n    return __assign({\n      minWidth: MIN_WIDTH,\n      paddingBottom: PADDING_BOTTOM\n    }, this.props.style);\n  };\n\n  MultistepDialog.prototype.renderLeftPanel = function () {\n    return React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_LEFT_PANEL\n    }, this.getDialogStepChildren().filter(isDialogStepElement).map(this.renderDialogStep));\n  };\n\n  MultistepDialog.prototype.maybeRenderRightPanel = function () {\n    var steps = this.getDialogStepChildren();\n\n    if (steps.length <= this.state.selectedIndex) {\n      return null;\n    }\n\n    var _a = steps[this.state.selectedIndex].props,\n        className = _a.className,\n        panel = _a.panel,\n        panelClassName = _a.panelClassName;\n    return React.createElement(\"div\", {\n      className: classNames(Classes.MULTISTEP_DIALOG_RIGHT_PANEL, className, panelClassName)\n    }, panel, this.renderFooter());\n  };\n\n  MultistepDialog.prototype.renderFooter = function () {\n    var _a = this.props,\n        closeButtonProps = _a.closeButtonProps,\n        isCloseButtonShown = _a.isCloseButtonShown,\n        showCloseButtonInFooter = _a.showCloseButtonInFooter,\n        onClose = _a.onClose;\n    var isFooterCloseButtonVisible = showCloseButtonInFooter && isCloseButtonShown;\n    var maybeCloseButton = !isFooterCloseButtonVisible ? undefined : React.createElement(Button, __assign({\n      text: \"Close\",\n      onClick: onClose\n    }, closeButtonProps));\n    return React.createElement(\"div\", {\n      className: Classes.MULTISTEP_DIALOG_FOOTER\n    }, maybeCloseButton, React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER_ACTIONS\n    }, this.renderButtons()));\n  };\n\n  MultistepDialog.prototype.renderButtons = function () {\n    var _a, _b;\n\n    var selectedIndex = this.state.selectedIndex;\n    var steps = this.getDialogStepChildren();\n    var buttons = [];\n\n    if (this.state.selectedIndex > 0) {\n      var backButtonProps = (_a = steps[selectedIndex].props.backButtonProps) !== null && _a !== void 0 ? _a : this.props.backButtonProps;\n      buttons.push(React.createElement(Button, __assign({\n        key: \"back\",\n        onClick: this.getDialogStepChangeHandler(selectedIndex - 1),\n        text: \"Back\"\n      }, backButtonProps)));\n    }\n\n    if (selectedIndex === this.getDialogStepChildren().length - 1) {\n      buttons.push(React.createElement(Button, __assign({\n        intent: \"primary\",\n        key: \"final\",\n        text: \"Submit\"\n      }, this.props.finalButtonProps)));\n    } else {\n      var nextButtonProps = (_b = steps[selectedIndex].props.nextButtonProps) !== null && _b !== void 0 ? _b : this.props.nextButtonProps;\n      buttons.push(React.createElement(Button, __assign({\n        intent: \"primary\",\n        key: \"next\",\n        onClick: this.getDialogStepChangeHandler(selectedIndex + 1),\n        text: \"Next\"\n      }, nextButtonProps)));\n    }\n\n    return buttons;\n  };\n\n  MultistepDialog.prototype.getDialogStepChangeHandler = function (index) {\n    var _this = this;\n\n    return function (event) {\n      if (_this.props.onChange !== undefined) {\n        var steps = _this.getDialogStepChildren();\n\n        var prevStepId = steps[_this.state.selectedIndex].props.id;\n        var newStepId = steps[index].props.id;\n\n        _this.props.onChange(newStepId, prevStepId, event);\n      }\n\n      _this.setState({\n        lastViewedIndex: Math.max(_this.state.lastViewedIndex, index),\n        selectedIndex: index\n      });\n    };\n  };\n  /** Filters children to only `<DialogStep>`s */\n\n\n  MultistepDialog.prototype.getDialogStepChildren = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return React.Children.toArray(props.children).filter(isDialogStepElement);\n  };\n\n  MultistepDialog.prototype.getInitialIndexFromProps = function (props) {\n    if (props.initialStepIndex !== undefined) {\n      var boundedInitialIndex = Math.max(0, Math.min(props.initialStepIndex, this.getDialogStepChildren(props).length - 1));\n      return {\n        lastViewedIndex: boundedInitialIndex,\n        selectedIndex: boundedInitialIndex\n      };\n    } else {\n      return {\n        lastViewedIndex: 0,\n        selectedIndex: 0\n      };\n    }\n  };\n\n  MultistepDialog.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".MultistepDialog\");\n  MultistepDialog.defaultProps = {\n    canOutsideClickClose: true,\n    isOpen: false,\n    resetOnClose: true,\n    showCloseButtonInFooter: false\n  };\n  return MultistepDialog;\n}(AbstractPureComponent2);\n\nexport { MultistepDialog };\n\nfunction isDialogStepElement(child) {\n  return Utils.isElementOfType(child, DialogStep);\n}","map":{"version":3,"mappings":"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","names":["classNames","React","AbstractPureComponent2","Classes","Utils","DISPLAYNAME_PREFIX","Button","Dialog","DialogStep","PADDING_BOTTOM","MIN_WIDTH","__extends","_this","getInitialIndexFromProps","props","step","index","stepNumber","hasBeenViewed","state","lastViewedIndex","currentlySelected","selectedIndex","className","DIALOG_STEP_CONTAINER","_a","ACTIVE","DIALOG_STEP_VIEWED","key","DIALOG_STEP","onClick","handleClickDialogStep","DIALOG_STEP_ICON","DIALOG_STEP_TITLE","title","getDialogStepChangeHandler","MultistepDialog","showCloseButtonInFooter","isCloseButtonShown","otherProps","isCloseButtonVisible","__assign","style","getDialogStyle","MULTISTEP_DIALOG_PANELS","renderLeftPanel","maybeRenderRightPanel","prevProps","resetOnClose","initialStepIndex","isOpen","setState","minWidth","paddingBottom","MULTISTEP_DIALOG_LEFT_PANEL","getDialogStepChildren","filter","isDialogStepElement","map","renderDialogStep","steps","length","panel","panelClassName","MULTISTEP_DIALOG_RIGHT_PANEL","renderFooter","closeButtonProps","onClose","isFooterCloseButtonVisible","maybeCloseButton","undefined","text","MULTISTEP_DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","renderButtons","buttons","backButtonProps","push","intent","finalButtonProps","nextButtonProps","_b","event","onChange","prevStepId","id","newStepId","Math","max","Children","toArray","children","boundedInitialIndex","min","canOutsideClickClose","child","isElementOfType"],"sources":["/Users/patocskaierik/Desktop/product/node_modules/@blueprintjs/core/src/components/dialog/multistepDialog.tsx"],"sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractPureComponent2, Classes, Utils } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { Button, ButtonProps } from \"../button/buttons\";\nimport { Dialog, DialogProps } from \"./dialog\";\nimport { DialogStep, DialogStepId, DialogStepProps, DialogStepButtonProps } from \"./dialogStep\";\n\ntype DialogStepElement = React.ReactElement<DialogStepProps & { children: React.ReactNode }>;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type MultistepDialogProps = IMultistepDialogProps;\n/** @deprecated use MultistepDialogProps */\nexport interface IMultistepDialogProps extends DialogProps {\n    /**\n     * Props for the back button.\n     */\n    backButtonProps?: DialogStepButtonProps;\n\n    /**\n     * Props for the close button that appears in the footer when there is no\n     * title.\n     */\n    closeButtonProps?: Partial<ButtonProps>;\n\n    /**\n     * Props for the button to display on the final step.\n     */\n    finalButtonProps?: Partial<ButtonProps>;\n\n    /**\n     * Props for the next button.\n     */\n    nextButtonProps?: DialogStepButtonProps;\n\n    /**\n     * A callback that is invoked when the user selects a different step by clicking on back, next, or a step itself.\n     */\n    onChange?(\n        newDialogStepId: DialogStepId,\n        prevDialogStepId: DialogStepId | undefined,\n        event: React.MouseEvent<HTMLElement>,\n    ): void;\n\n    /**\n     * Whether to reset the dialog state to its initial state on close.\n     * By default, closing the dialog will reset its state.\n     *\n     * @default true\n     */\n    resetOnClose?: boolean;\n\n    /**\n     * Whether the footer close button is shown. The button will only appear if\n     * `isCloseButtonShown` is `true`. The close button in the dialog title will\n     * not be shown when this is `true`.\n     *\n     * @default false\n     */\n    showCloseButtonInFooter?: boolean;\n\n    /**\n     * A 0 indexed initial step to start off on, to start in the middle of the dialog, for example.\n     * If the provided index exceeds the number of steps, it defaults to the last step.\n     * If a negative index is provided, it defaults to the first step.\n     */\n    initialStepIndex?: number;\n}\n\ninterface IMultistepDialogState {\n    lastViewedIndex: number;\n    selectedIndex: number;\n}\n\nconst PADDING_BOTTOM = 0;\n\nconst MIN_WIDTH = 800;\n\nexport class MultistepDialog extends AbstractPureComponent2<MultistepDialogProps, IMultistepDialogState> {\n    public static displayName = `${DISPLAYNAME_PREFIX}.MultistepDialog`;\n\n    public static defaultProps: Partial<MultistepDialogProps> = {\n        canOutsideClickClose: true,\n        isOpen: false,\n        resetOnClose: true,\n        showCloseButtonInFooter: false,\n    };\n\n    public state: IMultistepDialogState = this.getInitialIndexFromProps(this.props);\n\n    public render() {\n        const { showCloseButtonInFooter, isCloseButtonShown, ...otherProps } = this.props;\n\n        // Only one close button should be displayed. If the footer close button\n        // is shown, we need to ensure the dialog close button is not displayed.\n        const isCloseButtonVisible = !showCloseButtonInFooter && isCloseButtonShown;\n\n        return (\n            <Dialog isCloseButtonShown={isCloseButtonVisible} {...otherProps} style={this.getDialogStyle()}>\n                <div className={Classes.MULTISTEP_DIALOG_PANELS}>\n                    {this.renderLeftPanel()}\n                    {this.maybeRenderRightPanel()}\n                </div>\n            </Dialog>\n        );\n    }\n\n    public componentDidUpdate(prevProps: MultistepDialogProps) {\n        if (\n            (prevProps.resetOnClose || prevProps.initialStepIndex !== this.props.initialStepIndex) &&\n            !prevProps.isOpen &&\n            this.props.isOpen\n        ) {\n            this.setState(this.getInitialIndexFromProps(this.props));\n        }\n    }\n\n    private getDialogStyle() {\n        return { minWidth: MIN_WIDTH, paddingBottom: PADDING_BOTTOM, ...this.props.style };\n    }\n\n    private renderLeftPanel() {\n        return (\n            <div className={Classes.MULTISTEP_DIALOG_LEFT_PANEL}>\n                {this.getDialogStepChildren().filter(isDialogStepElement).map(this.renderDialogStep)}\n            </div>\n        );\n    }\n\n    private renderDialogStep = (step: DialogStepElement, index: number) => {\n        const stepNumber = index + 1;\n        const hasBeenViewed = this.state.lastViewedIndex >= index;\n        const currentlySelected = this.state.selectedIndex === index;\n        return (\n            <div\n                className={classNames(Classes.DIALOG_STEP_CONTAINER, {\n                    [Classes.ACTIVE]: currentlySelected,\n                    [Classes.DIALOG_STEP_VIEWED]: hasBeenViewed,\n                })}\n                key={index}\n            >\n                <div className={Classes.DIALOG_STEP} onClick={this.handleClickDialogStep(index)}>\n                    <div className={Classes.DIALOG_STEP_ICON}>{stepNumber}</div>\n                    <div className={Classes.DIALOG_STEP_TITLE}>{step.props.title}</div>\n                </div>\n            </div>\n        );\n    };\n\n    private handleClickDialogStep = (index: number) => {\n        if (index > this.state.lastViewedIndex) {\n            return;\n        }\n        return this.getDialogStepChangeHandler(index);\n    };\n\n    private maybeRenderRightPanel() {\n        const steps = this.getDialogStepChildren();\n        if (steps.length <= this.state.selectedIndex) {\n            return null;\n        }\n\n        const { className, panel, panelClassName } = steps[this.state.selectedIndex].props;\n        return (\n            <div className={classNames(Classes.MULTISTEP_DIALOG_RIGHT_PANEL, className, panelClassName)}>\n                {panel}\n                {this.renderFooter()}\n            </div>\n        );\n    }\n\n    private renderFooter() {\n        const { closeButtonProps, isCloseButtonShown, showCloseButtonInFooter, onClose } = this.props;\n        const isFooterCloseButtonVisible = showCloseButtonInFooter && isCloseButtonShown;\n        const maybeCloseButton = !isFooterCloseButtonVisible ? undefined : (\n            <Button text=\"Close\" onClick={onClose} {...closeButtonProps} />\n        );\n        return (\n            <div className={Classes.MULTISTEP_DIALOG_FOOTER}>\n                {maybeCloseButton}\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>{this.renderButtons()}</div>\n            </div>\n        );\n    }\n\n    private renderButtons() {\n        const { selectedIndex } = this.state;\n        const steps = this.getDialogStepChildren();\n        const buttons = [];\n\n        if (this.state.selectedIndex > 0) {\n            const backButtonProps = steps[selectedIndex].props.backButtonProps ?? this.props.backButtonProps;\n\n            buttons.push(\n                <Button\n                    key=\"back\"\n                    onClick={this.getDialogStepChangeHandler(selectedIndex - 1)}\n                    text=\"Back\"\n                    {...backButtonProps}\n                />,\n            );\n        }\n\n        if (selectedIndex === this.getDialogStepChildren().length - 1) {\n            buttons.push(<Button intent=\"primary\" key=\"final\" text=\"Submit\" {...this.props.finalButtonProps} />);\n        } else {\n            const nextButtonProps = steps[selectedIndex].props.nextButtonProps ?? this.props.nextButtonProps;\n\n            buttons.push(\n                <Button\n                    intent=\"primary\"\n                    key=\"next\"\n                    onClick={this.getDialogStepChangeHandler(selectedIndex + 1)}\n                    text=\"Next\"\n                    {...nextButtonProps}\n                />,\n            );\n        }\n\n        return buttons;\n    }\n\n    private getDialogStepChangeHandler(index: number) {\n        return (event: React.MouseEvent<HTMLElement>) => {\n            if (this.props.onChange !== undefined) {\n                const steps = this.getDialogStepChildren();\n                const prevStepId = steps[this.state.selectedIndex].props.id;\n                const newStepId = steps[index].props.id;\n                this.props.onChange(newStepId, prevStepId, event);\n            }\n            this.setState({\n                lastViewedIndex: Math.max(this.state.lastViewedIndex, index),\n                selectedIndex: index,\n            });\n        };\n    }\n\n    /** Filters children to only `<DialogStep>`s */\n    private getDialogStepChildren(props: MultistepDialogProps & { children?: React.ReactNode } = this.props) {\n        return React.Children.toArray(props.children).filter(isDialogStepElement);\n    }\n\n    private getInitialIndexFromProps(props: MultistepDialogProps) {\n        if (props.initialStepIndex !== undefined) {\n            const boundedInitialIndex = Math.max(\n                0,\n                Math.min(props.initialStepIndex, this.getDialogStepChildren(props).length - 1),\n            );\n            return {\n                lastViewedIndex: boundedInitialIndex,\n                selectedIndex: boundedInitialIndex,\n            };\n        } else {\n            return {\n                lastViewedIndex: 0,\n                selectedIndex: 0,\n            };\n        }\n    }\n}\n\nfunction isDialogStepElement(child: any): child is DialogStepElement {\n    return Utils.isElementOfType(child, DialogStep);\n}\n"]},"metadata":{},"sourceType":"module"}