{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\nimport { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"react\";\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2 } from \"../../components/hotkeys/hotkeysDialog2\";\nvar initialHotkeysState = {\n  hotkeys: [],\n  isDialogOpen: false\n};\n\nvar noOpDispatch = function () {\n  return null;\n}; // N.B. we can remove this optional call guard once Blueprint depends on React 16\n\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * exisitng context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\n\n\nexport var HotkeysContext = (_a = React.createContext) === null || _a === void 0 ? void 0 : _a.call(React, [initialHotkeysState, noOpDispatch]);\n\nvar hotkeysReducer = function (state, action) {\n  switch (action.type) {\n    case \"ADD_HOTKEYS\":\n      // only pick up unique hotkeys which haven't been registered already\n      var newUniqueHotkeys = [];\n\n      for (var _i = 0, _a = action.payload; _i < _a.length; _i++) {\n        var a = _a[_i];\n        var isUnique = true;\n\n        for (var _b = 0, _c = state.hotkeys; _b < _c.length; _b++) {\n          var b = _c[_b];\n          isUnique && (isUnique = !shallowCompareKeys(a, b, {\n            exclude: [\"onKeyDown\", \"onKeyUp\"]\n          }));\n        }\n\n        if (isUnique) {\n          newUniqueHotkeys.push(a);\n        }\n      }\n\n      return __assign(__assign({}, state), {\n        hotkeys: __spreadArray(__spreadArray([], state.hotkeys, true), newUniqueHotkeys, true)\n      });\n\n    case \"REMOVE_HOTKEYS\":\n      return __assign(__assign({}, state), {\n        hotkeys: state.hotkeys.filter(function (key) {\n          return action.payload.indexOf(key) === -1;\n        })\n      });\n\n    case \"OPEN_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: true\n      });\n\n    case \"CLOSE_DIALOG\":\n      return __assign(__assign({}, state), {\n        isDialogOpen: false\n      });\n\n    default:\n      return state;\n  }\n};\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\n\n\nexport var HotkeysProvider = function (_a) {\n  var _b;\n\n  var children = _a.children,\n      dialogProps = _a.dialogProps,\n      renderDialog = _a.renderDialog,\n      value = _a.value;\n  var hasExistingContext = value != null;\n\n  var _c = value !== null && value !== void 0 ? value : React.useReducer(hotkeysReducer, initialHotkeysState),\n      state = _c[0],\n      dispatch = _c[1];\n\n  var handleDialogClose = React.useCallback(function () {\n    return dispatch({\n      type: \"CLOSE_DIALOG\"\n    });\n  }, []);\n  var dialog = (_b = renderDialog === null || renderDialog === void 0 ? void 0 : renderDialog(state, {\n    handleDialogClose: handleDialogClose\n  })) !== null && _b !== void 0 ? _b : React.createElement(HotkeysDialog2, __assign({}, dialogProps, {\n    isOpen: state.isDialogOpen,\n    hotkeys: state.hotkeys,\n    onClose: handleDialogClose\n  })); // if we are working with an existing context, we don't need to generate our own dialog\n\n  return React.createElement(HotkeysContext.Provider, {\n    value: [state, dispatch]\n  }, children, hasExistingContext ? undefined : dialog);\n};","map":{"version":3,"mappings":"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","names":["React","shallowCompareKeys","HotkeysDialog2","initialHotkeysState","hotkeys","isDialogOpen","noOpDispatch","HotkeysContext","createContext","_a","hotkeysReducer","state","action","type","newUniqueHotkeys","payload","_i","a","isUnique","_b","b","exclude","push","filter","indexOf","key","HotkeysProvider","children","dialogProps","renderDialog","value","hasExistingContext","useReducer","dispatch","handleDialogClose","useCallback","dialog","__assign","isOpen","onClose","Provider","undefined"],"sources":["/Users/patocskaierik/Desktop/product/node_modules/@blueprintjs/core/src/context/hotkeys/hotkeysProvider.tsx"],"sourcesContent":["/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from \"react\";\n\nimport { shallowCompareKeys } from \"../../common/utils\";\nimport { HotkeysDialog2, HotkeysDialog2Props } from \"../../components/hotkeys/hotkeysDialog2\";\nimport { HotkeyConfig } from \"../../hooks\";\n\ninterface HotkeysContextState {\n    /** List of hotkeys accessible in the current scope, registered by currently mounted components, can be global or local. */\n    hotkeys: HotkeyConfig[];\n\n    /** Whether the global hotkeys dialog is open. */\n    isDialogOpen: boolean;\n}\n\ntype HotkeysAction =\n    | { type: \"ADD_HOTKEYS\" | \"REMOVE_HOTKEYS\"; payload: HotkeyConfig[] }\n    | { type: \"CLOSE_DIALOG\" | \"OPEN_DIALOG\" };\n\nexport type HotkeysContextInstance = [HotkeysContextState, React.Dispatch<HotkeysAction>];\n\nconst initialHotkeysState: HotkeysContextState = { hotkeys: [], isDialogOpen: false };\nconst noOpDispatch: React.Dispatch<HotkeysAction> = () => null;\n\n// N.B. we can remove this optional call guard once Blueprint depends on React 16\n/**\n * A React context used to register and deregister hotkeys as components are mounted and unmounted in an application.\n * Users should take care to make sure that only _one_ of these is instantiated and used within an application, especially\n * if using global hotkeys.\n *\n * You will likely not be using this HotkeysContext directly, except in cases where you need to get a direct handle on an\n * exisitng context instance for advanced use cases involving nested HotkeysProviders.\n *\n * For more information, see the [HotkeysProvider documentation](https://blueprintjs.com/docs/#core/context/hotkeys-provider).\n */\nexport const HotkeysContext = React.createContext?.<HotkeysContextInstance>([initialHotkeysState, noOpDispatch]);\n\nconst hotkeysReducer = (state: HotkeysContextState, action: HotkeysAction) => {\n    switch (action.type) {\n        case \"ADD_HOTKEYS\":\n            // only pick up unique hotkeys which haven't been registered already\n            const newUniqueHotkeys = [];\n            for (const a of action.payload) {\n                let isUnique = true;\n                for (const b of state.hotkeys) {\n                    isUnique &&= !shallowCompareKeys(a, b, { exclude: [\"onKeyDown\", \"onKeyUp\"] });\n                }\n                if (isUnique) {\n                    newUniqueHotkeys.push(a);\n                }\n            }\n            return {\n                ...state,\n                hotkeys: [...state.hotkeys, ...newUniqueHotkeys],\n            };\n        case \"REMOVE_HOTKEYS\":\n            return {\n                ...state,\n                hotkeys: state.hotkeys.filter(key => action.payload.indexOf(key) === -1),\n            };\n        case \"OPEN_DIALOG\":\n            return { ...state, isDialogOpen: true };\n        case \"CLOSE_DIALOG\":\n            return { ...state, isDialogOpen: false };\n        default:\n            return state;\n    }\n};\n\nexport interface HotkeysProviderProps {\n    /** The component subtree which will have access to this hotkeys context. */\n    children: React.ReactChild;\n\n    /** Optional props to customize the rendered hotkeys dialog. */\n    dialogProps?: Partial<Omit<HotkeysDialog2Props, \"hotkeys\">>;\n\n    /** If provided, this dialog render function will be used in place of the default implementation. */\n    renderDialog?: (state: HotkeysContextState, contextActions: { handleDialogClose: () => void }) => JSX.Element;\n\n    /** If provided, we will use this context instance instead of generating our own. */\n    value?: HotkeysContextInstance;\n}\n\n/**\n * Hotkeys context provider, necessary for the `useHotkeys` hook.\n */\nexport const HotkeysProvider = ({ children, dialogProps, renderDialog, value }: HotkeysProviderProps) => {\n    const hasExistingContext = value != null;\n    const [state, dispatch] = value ?? React.useReducer(hotkeysReducer, initialHotkeysState);\n    const handleDialogClose = React.useCallback(() => dispatch({ type: \"CLOSE_DIALOG\" }), []);\n\n    const dialog = renderDialog?.(state, { handleDialogClose }) ?? (\n        <HotkeysDialog2\n            {...dialogProps}\n            isOpen={state.isDialogOpen}\n            hotkeys={state.hotkeys}\n            onClose={handleDialogClose}\n        />\n    );\n\n    // if we are working with an existing context, we don't need to generate our own dialog\n    return (\n        <HotkeysContext.Provider value={[state, dispatch]}>\n            {children}\n            {hasExistingContext ? undefined : dialog}\n        </HotkeysContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}